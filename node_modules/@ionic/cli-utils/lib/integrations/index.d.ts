import { TaskChain } from '@ionic/cli-framework';
import { IConfig, IIntegration, IIntegrationAddOptions, IProject, IShell, InfoItem, IntegrationName, ProjectPersonalizationDetails } from '../../definitions';
import * as ζcapacitor from './capacitor';
import * as ζcordova from './cordova';
export { INTEGRATION_NAMES } from '../../guards';
export interface IntegrationOptions {
    quiet?: boolean;
}
export interface IntegrationDeps {
    config: IConfig;
    shell: IShell;
    project: IProject;
    tasks: TaskChain;
}
export declare abstract class BaseIntegration implements IIntegration {
    protected readonly config: IConfig;
    protected readonly project: IProject;
    protected readonly shell: IShell;
    protected readonly tasks: TaskChain;
    abstract readonly name: IntegrationName;
    abstract readonly summary: string;
    abstract readonly archiveUrl?: string;
    constructor({ config, project, shell, tasks }: IntegrationDeps);
    static createFromName(deps: IntegrationDeps, name: 'capacitor'): Promise<ζcapacitor.Integration>;
    static createFromName(deps: IntegrationDeps, name: 'cordova'): Promise<ζcordova.Integration>;
    static createFromName(deps: IntegrationDeps, name: IntegrationName): Promise<IIntegration>;
    getInfo(): Promise<InfoItem[]>;
    enable(): Promise<void>;
    disable(): Promise<void>;
    personalize(details: ProjectPersonalizationDetails): Promise<void>;
    add(opts?: IIntegrationAddOptions): Promise<void>;
}
