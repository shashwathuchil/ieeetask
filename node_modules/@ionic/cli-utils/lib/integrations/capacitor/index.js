"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const __1 = require("../");
const npm_1 = require("../../utils/npm");
class Integration extends __1.BaseIntegration {
    constructor() {
        super(...arguments);
        this.name = 'capacitor';
        this.summary = `Target native iOS and Android with Capacitor, Ionic's new native layer`;
        this.archiveUrl = undefined;
    }
    add(options) {
        const _super = name => super[name];
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.installCapacitorCore();
            yield this.installCapacitorCLI();
            yield this.shell.run('capacitor', ['init', this.project.config.get('name'), 'io.ionic.starter'], { cwd: this.project.directory });
            yield _super("add").call(this, options);
        });
    }
    installCapacitorCore() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [manager, ...managerArgs] = yield npm_1.pkgManagerArgs(this.config.get('npmClient'), { command: 'install', pkg: '@capacitor/core' });
            yield this.shell.run(manager, managerArgs, { cwd: this.project.directory });
        });
    }
    installCapacitorCLI() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [manager, ...managerArgs] = yield npm_1.pkgManagerArgs(this.config.get('npmClient'), { command: 'install', pkg: '@capacitor/cli' });
            yield this.shell.run(manager, managerArgs, { cwd: this.project.directory });
        });
    }
    getInfo() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [[capacitorCorePkg, capacitorCorePkgPath], capacitorCLIVersion,] = yield Promise.all([
                this.project.getPackageJson('@capacitor/core'),
                this.getCapacitorCLIVersion(),
            ]);
            const info = [
                { group: 'capacitor', key: 'capacitor', flair: 'Capacitor CLI', value: capacitorCLIVersion || 'not installed' },
                { group: 'capacitor', key: '@capacitor/core', value: capacitorCorePkg ? capacitorCorePkg.version : 'not installed', path: capacitorCorePkgPath },
            ];
            return info;
        });
    }
    getCapacitorCLIVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.shell.cmdinfo('capacitor', ['--version'], { cwd: this.project.directory });
        });
    }
}
exports.Integration = Integration;
