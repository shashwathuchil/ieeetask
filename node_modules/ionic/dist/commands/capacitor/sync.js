"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const base_1 = require("./base");
class SyncCommand extends base_1.CapacitorCommand {
    getMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return {
                name: 'sync',
                type: 'project',
                summary: 'Syncs your Capacitor project, equivalent to performing a "copy followed by an "update"',
                description: `
${chalk_1.default.green('ionic capacitor sync')} will do the following:
- Copy web assets to all Capacitor native platforms
- Update each Capacitor native platforms, such as any dependencies that need updating.
- Install any discovered Capacitor or Cordova plugins.
      `,
                exampleCommands: [],
                inputs: [],
            };
        });
    }
    preRun(inputs, options, runinfo) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.preRunChecks(runinfo);
        });
    }
    run(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [platform] = inputs;
            const args = ['sync'];
            if (platform) {
                args.push(platform);
            }
            yield this.runCapacitor(args);
        });
    }
}
exports.SyncCommand = SyncCommand;
